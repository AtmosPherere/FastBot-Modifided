// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WIDGETREUSEMODEL_FASTBOTX_H_
#define FLATBUFFERS_GENERATED_WIDGETREUSEMODEL_FASTBOTX_H_

#include "flatbuffers/flatbuffers.h"

namespace fastbotx {

struct WidgetSimilarityAttributes;
struct WidgetSimilarityAttributesBuilder;

struct WidgetCount;
struct WidgetCountBuilder;

struct ActivityWidgetMap;
struct ActivityWidgetMapBuilder;

struct ActionSimilarityAttributes;
struct ActionSimilarityAttributesBuilder;

struct ReuseEntry;
struct ReuseEntryBuilder;

struct WidgetReuseModel;
struct WidgetReuseModelBuilder;

struct WidgetCount FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WidgetCountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDGET_HASH = 4,
    VT_COUNT = 6,
    VT_SIMILARITY_ATTRS = 8
  };
  uint64_t widget_hash() const {
    return GetField<uint64_t>(VT_WIDGET_HASH, 0);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  const WidgetSimilarityAttributes *similarity_attrs() const {
    return GetPointer<const WidgetSimilarityAttributes *>(VT_SIMILARITY_ATTRS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_WIDGET_HASH) &&
           VerifyField<int32_t>(verifier, VT_COUNT) &&
           VerifyOffset(verifier, VT_SIMILARITY_ATTRS) &&
           verifier.VerifyTable(similarity_attrs()) &&
           verifier.EndTable();
  }
};

struct WidgetCountBuilder {
  typedef WidgetCount Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_widget_hash(uint64_t widget_hash) {
    fbb_.AddElement<uint64_t>(WidgetCount::VT_WIDGET_HASH, widget_hash, 0);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(WidgetCount::VT_COUNT, count, 0);
  }
  void add_similarity_attrs(flatbuffers::Offset<WidgetSimilarityAttributes> similarity_attrs) {
    fbb_.AddOffset(WidgetCount::VT_SIMILARITY_ATTRS, similarity_attrs);
  }
  explicit WidgetCountBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WidgetCount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WidgetCount>(end);
    return o;
  }
};

inline flatbuffers::Offset<WidgetCount> CreateWidgetCount(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t widget_hash = 0,
    int32_t count = 0,
    flatbuffers::Offset<WidgetSimilarityAttributes> similarity_attrs = 0) {
  WidgetCountBuilder builder_(_fbb);
  builder_.add_similarity_attrs(similarity_attrs);
  builder_.add_count(count);
  builder_.add_widget_hash(widget_hash);
  return builder_.Finish();
}

struct ActivityWidgetMap FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ActivityWidgetMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTIVITY = 4,
    VT_WIDGETS = 6
  };
  const flatbuffers::String *activity() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTIVITY);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fastbotx::WidgetCount>> *widgets() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fastbotx::WidgetCount>> *>(VT_WIDGETS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTIVITY) &&
           verifier.VerifyString(activity()) &&
           VerifyOffset(verifier, VT_WIDGETS) &&
           verifier.VerifyVector(widgets()) &&
           verifier.VerifyVectorOfTables(widgets()) &&
           verifier.EndTable();
  }
};

struct ActivityWidgetMapBuilder {
  typedef ActivityWidgetMap Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_activity(flatbuffers::Offset<flatbuffers::String> activity) {
    fbb_.AddOffset(ActivityWidgetMap::VT_ACTIVITY, activity);
  }
  void add_widgets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fastbotx::WidgetCount>>> widgets) {
    fbb_.AddOffset(ActivityWidgetMap::VT_WIDGETS, widgets);
  }
  explicit ActivityWidgetMapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ActivityWidgetMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ActivityWidgetMap>(end);
    return o;
  }
};

inline flatbuffers::Offset<ActivityWidgetMap> CreateActivityWidgetMap(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> activity = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fastbotx::WidgetCount>>> widgets = 0) {
  ActivityWidgetMapBuilder builder_(_fbb);
  builder_.add_widgets(widgets);
  builder_.add_activity(activity);
  return builder_.Finish();
}

inline flatbuffers::Offset<ActivityWidgetMap> CreateActivityWidgetMapDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *activity = nullptr,
    const std::vector<flatbuffers::Offset<fastbotx::WidgetCount>> *widgets = nullptr) {
  auto activity__ = activity ? _fbb.CreateString(activity) : 0;
  auto widgets__ = widgets ? _fbb.CreateVector<flatbuffers::Offset<fastbotx::WidgetCount>>(*widgets) : 0;
  return fastbotx::CreateActivityWidgetMap(
      _fbb,
      activity__,
      widgets__);
}

struct ReuseEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReuseEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION = 4,
    VT_ACTIVITIES = 6,
    VT_SIMILARITY_ATTRS = 8
  };
  uint64_t action() const {
    return GetField<uint64_t>(VT_ACTION, 0);
  }
  bool KeyCompareLessThan(const ReuseEntry *o) const {
    return action() < o->action();
  }
  int KeyCompareWithValue(uint64_t val) const {
    return static_cast<int>(action() > val) - static_cast<int>(action() < val);
  }
  const flatbuffers::Vector<flatbuffers::Offset<fastbotx::ActivityWidgetMap>> *activities() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fastbotx::ActivityWidgetMap>> *>(VT_ACTIVITIES);
  }
  const ActionSimilarityAttributes *similarity_attrs() const {
    return GetPointer<const ActionSimilarityAttributes *>(VT_SIMILARITY_ATTRS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ACTION) &&
           VerifyOffset(verifier, VT_ACTIVITIES) &&
           verifier.VerifyVector(activities()) &&
           verifier.VerifyVectorOfTables(activities()) &&
           VerifyOffset(verifier, VT_SIMILARITY_ATTRS) &&
           verifier.VerifyTable(similarity_attrs()) &&
           verifier.EndTable();
  }
};

struct ReuseEntryBuilder {
  typedef ReuseEntry Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action(uint64_t action) {
    fbb_.AddElement<uint64_t>(ReuseEntry::VT_ACTION, action, 0);
  }
  void add_activities(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fastbotx::ActivityWidgetMap>>> activities) {
    fbb_.AddOffset(ReuseEntry::VT_ACTIVITIES, activities);
  }
  void add_similarity_attrs(flatbuffers::Offset<ActionSimilarityAttributes> similarity_attrs) {
    fbb_.AddOffset(ReuseEntry::VT_SIMILARITY_ATTRS, similarity_attrs);
  }
  explicit ReuseEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ReuseEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReuseEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReuseEntry> CreateReuseEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t action = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fastbotx::ActivityWidgetMap>>> activities = 0,
    flatbuffers::Offset<ActionSimilarityAttributes> similarity_attrs = 0) {
  ReuseEntryBuilder builder_(_fbb);
  builder_.add_similarity_attrs(similarity_attrs);
  builder_.add_activities(activities);
  builder_.add_action(action);
  return builder_.Finish();
}

inline flatbuffers::Offset<ReuseEntry> CreateReuseEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t action = 0,
    const std::vector<flatbuffers::Offset<fastbotx::ActivityWidgetMap>> *activities = nullptr) {
  auto activities__ = activities ? _fbb.CreateVector<flatbuffers::Offset<fastbotx::ActivityWidgetMap>>(*activities) : 0;
  return fastbotx::CreateReuseEntry(
      _fbb,
      action,
      activities__);
}

struct WidgetReuseModel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WidgetReuseModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODEL = 4,
    VT_PLATFORM_INFO = 6,
    VT_SAVE_SIMILARITY_ATTRS = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<fastbotx::ReuseEntry>> *model() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fastbotx::ReuseEntry>> *>(VT_MODEL);
  }
  const flatbuffers::String *platform_info() const {
    return GetPointer<const flatbuffers::String *>(VT_PLATFORM_INFO);
  }
  bool save_similarity_attrs() const {
    return GetField<uint8_t>(VT_SAVE_SIMILARITY_ATTRS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MODEL) &&
           verifier.VerifyVector(model()) &&
           verifier.VerifyVectorOfTables(model()) &&
           VerifyOffset(verifier, VT_PLATFORM_INFO) &&
           verifier.VerifyString(platform_info()) &&
           VerifyField<uint8_t>(verifier, VT_SAVE_SIMILARITY_ATTRS) &&
           verifier.EndTable();
  }
};

struct WidgetReuseModelBuilder {
  typedef WidgetReuseModel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_model(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fastbotx::ReuseEntry>>> model) {
    fbb_.AddOffset(WidgetReuseModel::VT_MODEL, model);
  }
  void add_platform_info(flatbuffers::Offset<flatbuffers::String> platform_info) {
    fbb_.AddOffset(WidgetReuseModel::VT_PLATFORM_INFO, platform_info);
  }
  void add_save_similarity_attrs(bool save_similarity_attrs) {
    fbb_.AddElement<uint8_t>(WidgetReuseModel::VT_SAVE_SIMILARITY_ATTRS, static_cast<uint8_t>(save_similarity_attrs), 0);
  }
  explicit WidgetReuseModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WidgetReuseModel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WidgetReuseModel>(end);
    return o;
  }
};

inline flatbuffers::Offset<WidgetReuseModel> CreateWidgetReuseModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fastbotx::ReuseEntry>>> model = 0,
    flatbuffers::Offset<flatbuffers::String> platform_info = 0,
    bool save_similarity_attrs = false) {
  WidgetReuseModelBuilder builder_(_fbb);
  builder_.add_model(model);
  builder_.add_platform_info(platform_info);
  builder_.add_save_similarity_attrs(save_similarity_attrs);
  return builder_.Finish();
}

inline flatbuffers::Offset<WidgetReuseModel> CreateWidgetReuseModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<fastbotx::ReuseEntry>> *model = nullptr) {
  auto model__ = model ? _fbb.CreateVectorOfSortedTables<fastbotx::ReuseEntry>(model) : 0;
  return fastbotx::CreateWidgetReuseModel(
      _fbb,
      model__);
}

inline const fastbotx::WidgetReuseModel *GetWidgetReuseModel(const void *buf) {
  return flatbuffers::GetRoot<fastbotx::WidgetReuseModel>(buf);
}

inline const fastbotx::WidgetReuseModel *GetSizePrefixedWidgetReuseModel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<fastbotx::WidgetReuseModel>(buf);
}

inline bool VerifyWidgetReuseModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fastbotx::WidgetReuseModel>(nullptr);
}

inline bool VerifySizePrefixedWidgetReuseModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fastbotx::WidgetReuseModel>(nullptr);
}

inline void FinishWidgetReuseModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fastbotx::WidgetReuseModel> root) {
  fbb.Finish(root);
}

// WidgetSimilarityAttributes structure
struct WidgetSimilarityAttributes FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WidgetSimilarityAttributesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4,
    VT_ACTIVITY_NAME = 6,
    VT_RESOURCE_ID = 8,
    VT_ICON_BASE64 = 10
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  const flatbuffers::String *activity_name() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTIVITY_NAME);
  }
  const flatbuffers::String *resource_id() const {
    return GetPointer<const flatbuffers::String *>(VT_RESOURCE_ID);
  }
  const flatbuffers::String *icon_base64() const {
    return GetPointer<const flatbuffers::String *>(VT_ICON_BASE64);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           VerifyOffset(verifier, VT_ACTIVITY_NAME) &&
           verifier.VerifyString(activity_name()) &&
           VerifyOffset(verifier, VT_RESOURCE_ID) &&
           verifier.VerifyString(resource_id()) &&
           VerifyOffset(verifier, VT_ICON_BASE64) &&
           verifier.VerifyString(icon_base64()) &&
           verifier.EndTable();
  }
};

struct WidgetSimilarityAttributesBuilder {
  typedef WidgetSimilarityAttributes Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(WidgetSimilarityAttributes::VT_TEXT, text);
  }
  void add_activity_name(flatbuffers::Offset<flatbuffers::String> activity_name) {
    fbb_.AddOffset(WidgetSimilarityAttributes::VT_ACTIVITY_NAME, activity_name);
  }
  void add_resource_id(flatbuffers::Offset<flatbuffers::String> resource_id) {
    fbb_.AddOffset(WidgetSimilarityAttributes::VT_RESOURCE_ID, resource_id);
  }
  void add_icon_base64(flatbuffers::Offset<flatbuffers::String> icon_base64) {
    fbb_.AddOffset(WidgetSimilarityAttributes::VT_ICON_BASE64, icon_base64);
  }
  explicit WidgetSimilarityAttributesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WidgetSimilarityAttributes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WidgetSimilarityAttributes>(end);
    return o;
  }
};

inline flatbuffers::Offset<WidgetSimilarityAttributes> CreateWidgetSimilarityAttributes(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    flatbuffers::Offset<flatbuffers::String> activity_name = 0,
    flatbuffers::Offset<flatbuffers::String> resource_id = 0,
    flatbuffers::Offset<flatbuffers::String> icon_base64 = 0) {
  WidgetSimilarityAttributesBuilder builder_(_fbb);
  builder_.add_icon_base64(icon_base64);
  builder_.add_resource_id(resource_id);
  builder_.add_activity_name(activity_name);
  builder_.add_text(text);
  return builder_.Finish();
}

// ActionSimilarityAttributes structure
struct ActionSimilarityAttributes FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ActionSimilarityAttributesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_TYPE = 4,
    VT_ACTIVITY_NAME = 6,
    VT_TARGET_WIDGET = 8
  };
  int32_t action_type() const {
    return GetField<int32_t>(VT_ACTION_TYPE, 0);
  }
  const flatbuffers::String *activity_name() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTIVITY_NAME);
  }
  const WidgetSimilarityAttributes *target_widget() const {
    return GetPointer<const WidgetSimilarityAttributes *>(VT_TARGET_WIDGET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ACTION_TYPE) &&
           VerifyOffset(verifier, VT_ACTIVITY_NAME) &&
           verifier.VerifyString(activity_name()) &&
           VerifyOffset(verifier, VT_TARGET_WIDGET) &&
           verifier.VerifyTable(target_widget()) &&
           verifier.EndTable();
  }
};

struct ActionSimilarityAttributesBuilder {
  typedef ActionSimilarityAttributes Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action_type(int32_t action_type) {
    fbb_.AddElement<int32_t>(ActionSimilarityAttributes::VT_ACTION_TYPE, action_type, 0);
  }
  void add_activity_name(flatbuffers::Offset<flatbuffers::String> activity_name) {
    fbb_.AddOffset(ActionSimilarityAttributes::VT_ACTIVITY_NAME, activity_name);
  }
  void add_target_widget(flatbuffers::Offset<WidgetSimilarityAttributes> target_widget) {
    fbb_.AddOffset(ActionSimilarityAttributes::VT_TARGET_WIDGET, target_widget);
  }
  explicit ActionSimilarityAttributesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ActionSimilarityAttributes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ActionSimilarityAttributes>(end);
    return o;
  }
};

inline flatbuffers::Offset<ActionSimilarityAttributes> CreateActionSimilarityAttributes(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t action_type = 0,
    flatbuffers::Offset<flatbuffers::String> activity_name = 0,
    flatbuffers::Offset<WidgetSimilarityAttributes> target_widget = 0) {
  ActionSimilarityAttributesBuilder builder_(_fbb);
  builder_.add_target_widget(target_widget);
  builder_.add_activity_name(activity_name);
  builder_.add_action_type(action_type);
  return builder_.Finish();
}




inline void FinishSizePrefixedWidgetReuseModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<fastbotx::WidgetReuseModel> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fastbotx

#endif  // FLATBUFFERS_GENERATED_WIDGETREUSEMODEL_FASTBOTX_H_
